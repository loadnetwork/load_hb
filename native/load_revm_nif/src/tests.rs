#[cfg(test)]
mod tests {
    use std::fs;

    use crate::core::interpreter::eval;
    use serde_json::Value;

    #[test]
    // native gas token transfer
    fn test_eval_raw_transaction_with_state() {
        let raw_tx_hex = "02f87782251881878447868c008447868c008307a12094c69b7ea1931e207bebe89fa32b10435aec234c40893635c9adc5dea0000080c080a07a207f6815ba6a9d92b49f205695514c93fbdb2abe37a1610389958a92f13aa4a0556295a23580307b7f0248784dcb9ec9c9c7aba9234703f902e0b37f227ab9f2";
        let previous_state = fs::read_to_string("./state.json").unwrap();
        let (result, state) = eval(raw_tx_hex.to_string(), Some(previous_state)).unwrap();

        let result_json: Value = serde_json::to_value(&result).unwrap();
        println!("TX response:{:?}", result_json);
        println!("new eval state result: {}", state);
    }

    #[test]
    // resimulated from https://explorer.load.network/tx/0xcf0b4cceba9320dbf4b7a1311e75c0683cda50fda6a85b8d780a45bd53146a0f
    fn test_deploy_erc20_token() {
        let raw_tx_hex = "02f90a8282251881cc843b9ac9f9843b9aca07830b1d248080b90a27608060405234801561000f575f80fd5b50604051610a07380380610a0783398101604081905261002e916100b4565b6040518060400160405280600a8152602001692932b634b1aa37b5b2b760b11b8152506040518060400160405280600581526020016452454c494360d81b815250816003908161007e9190610179565b50600461008b8282610179565b5050600580546001600160a01b0319166001600160a01b03939093169290921790915550610233565b5f602082840312156100c4575f80fd5b81516001600160a01b03811681146100da575f80fd5b9392505050565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061010957607f821691505b60208210810361012757634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561017457805f5260205f20601f840160051c810160208510156101525750805b601f840160051c820191505b81811015610171575f815560010161015e565b50505b505050565b81516001600160401b03811115610192576101926100e1565b6101a6816101a084546100f5565b8461012d565b6020601f8211600181146101d8575f83156101c15750848201515b5f19600385901b1c1916600184901b178455610171565b5f84815260208120601f198516915b8281101561020757878501518255602094850194600190920191016101e7565b508482101561022457868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b6107c7806102405f395ff3fe608060405234801561000f575f80fd5b50600436106100a6575f3560e01c806340c10f191161006e57806340c10f191461011f57806370a08231146101345780638da5cb5b1461015c57806395d89b4114610187578063a9059cbb1461018f578063dd62ed3e146101a2575f80fd5b806306fdde03146100aa578063095ea7b3146100c857806318160ddd146100eb57806323b872dd146100fd578063313ce56714610110575b5f80fd5b6100b26101da565b6040516100bf9190610637565b60405180910390f35b6100db6100d6366004610687565b61026a565b60405190151581526020016100bf565b6002545b6040519081526020016100bf565b6100db61010b3660046106af565b610283565b604051601281526020016100bf565b61013261012d366004610687565b6102a6565b005b6100ef6101423660046106e9565b6001600160a01b03165f9081526020819052604090205490565b60055461016f906001600160a01b031681565b6040516001600160a01b0390911681526020016100bf565b6100b2610304565b6100db61019d366004610687565b610313565b6100ef6101b0366004610709565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101e99061073a565b80601f01602080910402602001604051908101604052809291908181526020018280546102159061073a565b80156102605780601f1061023757610100808354040283529160200191610260565b820191905f5260205f20905b81548152906001019060200180831161024357829003601f168201915b5050505050905090565b5f33610277818585610320565b60019150505b92915050565b5f33610290858285610332565b61029b8585856103ae565b506001949350505050565b6005546001600160a01b031633146102f65760405162461bcd60e51b815260206004820152600e60248201526d139bdd08185d5d1a1bdc9a5e995960921b60448201526064015b60405180910390fd5b610300828261040b565b5050565b6060600480546101e99061073a565b5f336102778185856103ae565b61032d838383600161043f565b505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f198110156103a8578181101561039a57604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016102ed565b6103a884848484035f61043f565b50505050565b6001600160a01b0383166103d757604051634b637e8f60e11b81525f60048201526024016102ed565b6001600160a01b0382166104005760405163ec442f0560e01b81525f60048201526024016102ed565b61032d838383610511565b6001600160a01b0382166104345760405163ec442f0560e01b81525f60048201526024016102ed565b6103005f8383610511565b6001600160a01b0384166104685760405163e602df0560e01b81525f60048201526024016102ed565b6001600160a01b03831661049157604051634a1406b160e11b81525f60048201526024016102ed565b6001600160a01b038085165f90815260016020908152604080832093871683529290522082905580156103a857826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161050391815260200190565b60405180910390a350505050565b6001600160a01b03831661053b578060025f8282546105309190610772565b909155506105ab9050565b6001600160a01b0383165f908152602081905260409020548181101561058d5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016102ed565b6001600160a01b0384165f9081526020819052604090209082900390555b6001600160a01b0382166105c7576002805482900390556105e5565b6001600160a01b0382165f9081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161062a91815260200190565b60405180910390a3505050565b602081525f82518060208401528060208501604085015e5f604082850101526040601f19601f83011684010191505092915050565b80356001600160a01b0381168114610682575f80fd5b919050565b5f8060408385031215610698575f80fd5b6106a18361066c565b946020939093013593505050565b5f805f606084860312156106c1575f80fd5b6106ca8461066c565b92506106d86020850161066c565b929592945050506040919091013590565b5f602082840312156106f9575f80fd5b6107028261066c565b9392505050565b5f806040838503121561071a575f80fd5b6107238361066c565b91506107316020840161066c565b90509250929050565b600181811c9082168061074e57607f821691505b60208210810361076c57634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561027d57634e487b7160e01b5f52601160045260245ffdfea2646970667358221220736e894ea469e84221194a6c2c10345f74c91734e0fb239946140c9cd86b320864736f6c634300081a00330000000000000000000000000d74453e8f63e71824cf05e5d779a0eb27f4a3b3c080a0faab3c33d8be973197c0274c4ab1ae170a54a5111b5073e21bbb4ecc244e78509f8b0596c9de10ac72e786ffa5b987e30e70873cb8a071eebe80e46bf054968f";
        let previous_state = fs::read_to_string("./state.json").unwrap();
        let (result, state) = eval(raw_tx_hex.to_string(), Some(previous_state)).unwrap();

        let result_json: Value = serde_json::to_value(&result).unwrap();
        println!("TX response:{:?}", result_json);
        println!("new eval state result: {}", state);
    }

    #[test]
    // resimulated from https://explorer.load.network/tx/0xd44f3638ffaae7d813c466933ec8c1064dfe78f638ef4c49bf76afa5e4b533e5
    fn test_transfer_erc20_token() {
        let raw_tx_hex = "02f8b382251881ce843b9ac9f9843b9aca0783087859944c8d90ce1158b153ce1f64a1d886485ec37899e780b84440c10f19000000000000000000000000bc9bf4dd50a15d79660439d8c7c4bf02ba8c84de00000000000000000000000000000000000000000000003635c9adc5dea00000c001a0e44b529ded8f647ee0516e3387b5f4f6510d5b37d972f55da688c12dec3cc5a4a00ac4a195d2618d27fc18ca5d861bdf4ab54c499b3ec101694c64a10bd2e17547";
        let previous_state = fs::read_to_string("./state.json").unwrap();
        let (result, state) = eval(raw_tx_hex.to_string(), Some(previous_state)).unwrap();

        let result_json: Value = serde_json::to_value(&result).unwrap();
        println!("TX response:{:?}", result_json);
        println!("new eval state result: {}", state);
    }
}
